:javascript
  // var palette = new Rickshaw.Color.Palette();

  // Load graph
  // var graph = new Rickshaw.Graph( {
  //   element: document.querySelector(".chart.load"),
  //     width: 1000,
  //       height: 300,
  //       interpolation: "linear",
  //       renderer: "line",
  //       series: #{@load_data}
  // } );
  // var axes = new Rickshaw.Graph.Axis.Time( {
  //   graph: graph,
  //   orientation: "bottom"
  // } );
  // var y_axis = new Rickshaw.Graph.Axis.Y( {
  //   graph: graph,
  //   orientation: "left",
  //   tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
  //   element: document.querySelector(".y_axis.load")
  // } );

  // var legend = new Rickshaw.Graph.Legend( {
  //   element: document.querySelector(".legend.load"),
  //     graph: graph
  // } );
  // graph.render();

  // var hoverDetail = new Rickshaw.Graph.HoverDetail({
  //   graph: graph
  // });

  // var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight( {
  //   graph: graph,
  //   legend: legend
  // });


  // Memory percentage graph
  //palette = new Rickshaw.Color.Palette();

  var graph_colors = ["#cb513a", "#73c03a", "#65b9ac", "#4682b4", "#96557e", "#785f43", "#858772", "#b5b6a9", "#c7b439", "#4fbd66", "#55a9b7", "#724ea5", "#874c4f", "#817959", "#9d9f8d", "#b9b777", "#7ec244", "#52ba98", "#4f65b0", "#964d89", "#846552", "#929171", "#aaac82", "#c1945a", "#c7b439"];

  // graph = new Rickshaw.Graph( {
  //   element: document.querySelector(".chart.mem"),
  //     width: 1000,
  //     height: 300,
  //     interpolation: "linear",
  //     renderer: "line",
  //     series: #{@mem_data}
  // } );
  // axes = new Rickshaw.Graph.Axis.Time( { graph: graph } );
  // y_axis = new Rickshaw.Graph.Axis.Y( {
  //   graph: graph,
  //   orientation: "left",
  //   tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
  //   element: document.querySelector(".y_axis.mem"),
  // } );

  // legend = new Rickshaw.Graph.Legend( {
  //   element: document.querySelector(".legend.mem"),
  //   graph: graph
  // } );
  // graph.render();

  // var hoverDetail = new Rickshaw.Graph.HoverDetail({
  //   graph: graph
  // });

  // var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight( {
  //   graph: graph,
  //   legend: legend
  // });

  // // IO read graph
  // palette = new Rickshaw.Color.Palette();

  // graph = new Rickshaw.Graph( {
  //   element: document.querySelector(".chart.ioread"),
  //   width: 1000,
  //   height: 300,
  //   interpolation: "linear",
  //   renderer: "line",
  //   series: #{@ioread_data}
  // } );
  // axes = new Rickshaw.Graph.Axis.Time( { graph: graph } );
  // y_axis = new Rickshaw.Graph.Axis.Y( {
  //   graph: graph,
  //   orientation: "left",
  //   tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
  //   element: document.querySelector(".y_axis.ioread"),
  // } );

  // legend = new Rickshaw.Graph.Legend( {
  //   element: document.querySelector(".legend.ioread"),
  //   graph: graph
  // } );
  // graph.render();

  // var hoverDetail = new Rickshaw.Graph.HoverDetail({
  //   graph: graph
  // });

  // var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight( {
  //   graph: graph,
  //   legend: legend
  // });

  // // IO write graph
  // palette = new Rickshaw.Color.Palette();
  // graph = new Rickshaw.Graph( {
  //   element: document.querySelector(".chart.iowrite"),
  //   width: 1000,
  //   height: 300,
  //   interpolation: "linear",
  //   renderer: "line",
  //   series: #{@iowrite_data}
  // } );
  // axes = new Rickshaw.Graph.Axis.Time( { graph: graph } );
  // y_axis = new Rickshaw.Graph.Axis.Y( {
  //   graph: graph,
  //   orientation: "left",
  //   tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
  //   element: document.querySelector(".y_axis.iowrite"),
  // } );

  // legend = new Rickshaw.Graph.Legend( {
  //   element: document.querySelector(".legend.iowrite"),
  //   graph: graph
  // } );
  // graph.render();

  // var hoverDetail = new Rickshaw.Graph.HoverDetail({
  //   graph: graph
  // });

  // var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight( {
  //   graph: graph,
  //   legend: legend
  // });
  var matrics_data = #{@matrics_data}  
  //var matrics_data_array = []
  // $.each(data, function(i, item) {
  //   matrics_data_array.push[data[i]]
  // });â€‹
  var charts = []
  $(function () {
    $.each(matrics_data, function(i, matric) {     
      var seriesOptions = [],
          seriesCounter = 0,    
          systems = matric['comps']

      var $div = $("<div>", {id: matric.name, class: "chart_container"});
      $("#container").append($div);

      //var chart = new Highcharts.Chart(options);
      createChart = function () {
        charts.push(new Highcharts.StockChart({
            title: {
              text: matric.description
            },
            chart: {
              renderTo: matric.name,
              pinchType: "xy",
              zoomType: "xy",
              resetZoomButton: {
                position: {
                  align: 'right', 
                  verticalAlign: 'bottom'                
                }
              },
              events: {                    
                redraw: function () {
                  // modify the legend symbol from a line to a rect                  
                  $(".highcharts-legend-item path").attr('stroke-width', 15);
                }
              }
            },                
            legend: {
              enabled: true,
              align: 'right',                  
              layout: 'vertical',
              verticalAlign: 'middle',
              itemMarginTop: 5,
              itemMarginBottom: 5,
              symbolWidth: 20                  
            },
            rangeSelector: {
                buttons: [{
                    count: 10,
                    type: 'minute',
                    text: '10 M'
                }, {
                    count: 1,
                    type: 'hour',
                    text: '1 H'
                }, {
                    count: 6,
                    type: 'hour',
                    text: '6 H'
                }, {
                    count: 1,
                    type: 'day',
                    text: '1 Day'
                }, {
                    count: 1,
                    type: 'month',
                    text: '1 Mon'
                }, {
                    count: 1,
                    type: 'year',
                    text: '1 Y'
                },{
                    type: 'all',
                    text: 'All'
                }],
                inputEnabled: true,
                selected: 6
            },
            yAxis: {
                labels: {
                    formatter: function () {                       
                      var matric = matrics_data[this.chart.series[0].options.dataLabels]              
                      return (this.y > 0 ? ' + ' : '') + this.value*matric.multiplier + matric.unit;
                    }
                },
                plotLines: [{
                    value: 0,
                    width: 2,
                    color: 'silver'
                }],
                min: 0 
            },    
            tooltip: {
              enabled: true,
              formatter:function(){
                var tag = '<span>' +new Date(this.points[0].x).toUTCString()+'<br/></span>';                      
                for (var i in this.points) {
                  var point = this.points[i];                        
                  var matric = matrics_data[point.series.options.dataLabels]      
                  tag += '<span style="color:'+point.series.color+'">'+point.series.name+'</span>: <b>'+Highcharts.numberFormat(point.y*matric.multiplier, 2)+matric.unit+'</b><br/>';                     
                }                      
                return tag
              }
            },
            series: seriesOptions
        }));
      };

      $.each(systems, function (i) {           
        seriesOptions[i] = {
          name: systems[i].name,
          data: systems[i].data,
          color: graph_colors[i],
          dataLabels: matric.name,
          cursor : 'pointer',
          turboThreshold: 0
        };   
        seriesCounter += 1;
        if (seriesCounter === systems.length) {
            createChart();
        }     
      });
    })
  });
    /**
   * Dark theme for Highcharts JS
   * @author Torstein Honsi
   */

  // Load the fonts
  Highcharts.createElement('link', {
     href: '//fonts.googleapis.com/css?family=Unica+One',
     rel: 'stylesheet',
     type: 'text/css'
  }, null, document.getElementsByTagName('head')[0]);

  Highcharts.theme = {
     colors: ["#2b908f", "#90ee7e", "#f45b5b", "#7798BF", "#aaeeee", "#ff0066", "#eeaaee",
        "#55BF3B", "#DF5353", "#7798BF", "#aaeeee"],
     chart: {
        backgroundColor: {
           linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
           stops: [
              [0, '#2a2a2b'],
              [1, '#3e3e40']
           ]
        },
        style: {
           fontFamily: "'Unica One', sans-serif"
        },
        plotBorderColor: '#606063'
     },
     title: {
        style: {
           color: '#E0E0E3',
           textTransform: 'uppercase',
           fontSize: '20px'
        }
     },
     subtitle: {
        style: {
           color: '#E0E0E3',
           textTransform: 'uppercase'
        }
     },
     xAxis: {
        gridLineColor: '#707073',
        labels: {
           style: {
              color: '#E0E0E3'
           }
        },
        lineColor: '#707073',
        minorGridLineColor: '#505053',
        tickColor: '#707073',
        title: {
           style: {
              color: '#A0A0A3'

           }
        }
     },
     yAxis: {
        gridLineColor: '#707073',
        labels: {
           style: {
              color: '#E0E0E3'
           }
        },
        lineColor: '#707073',
        minorGridLineColor: '#505053',
        tickColor: '#707073',
        tickWidth: 1,
        title: {
           style: {
              color: '#A0A0A3'
           }
        }
     },
     tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.85)',
        style: {
           color: '#F0F0F0'
        }
     },
     plotOptions: {
        series: {
           dataLabels: {
              color: '#B0B0B3'
           },
           marker: {
              lineColor: '#333'
           }
        },
        boxplot: {
           fillColor: '#505053'
        },
        candlestick: {
           lineColor: 'white'
        },
        errorbar: {
           color: 'white'
        }
     },
     legend: {
        itemStyle: {
           color: '#E0E0E3'
        },
        itemHoverStyle: {
           color: '#FFF'
        },
        itemHiddenStyle: {
           color: '#606063'
        }
     },
     credits: {
        style: {
           color: '#666'
        }
     },
     labels: {
        style: {
           color: '#707073'
        }
     },

     drilldown: {
        activeAxisLabelStyle: {
           color: '#F0F0F3'
        },
        activeDataLabelStyle: {
           color: '#F0F0F3'
        }
     },

     navigation: {
        buttonOptions: {
           symbolStroke: '#DDDDDD',
           theme: {
              fill: '#505053'
           }
        }
     },

     // scroll charts
     rangeSelector: {
        buttonTheme: {
           fill: '#505053',
           stroke: '#000000',
           style: {
              color: '#CCC'
           },
           states: {
              hover: {
                 fill: '#707073',
                 stroke: '#000000',
                 style: {
                    color: 'white'
                 }
              },
              select: {
                 fill: '#000003',
                 stroke: '#000000',
                 style: {
                    color: 'white'
                 }
              }
           }
        },
        inputBoxBorderColor: '#505053',
        inputStyle: {
           backgroundColor: '#333',
           color: 'silver'
        },
        labelStyle: {
           color: 'silver'
        }
     },

     navigator: {
        handles: {
           backgroundColor: '#666',
           borderColor: '#AAA'
        },
        outlineColor: '#CCC',
        maskFill: 'rgba(255,255,255,0.1)',
        series: {
           color: '#7798BF',
           lineColor: '#A6C7ED'
        },
        xAxis: {
           gridLineColor: '#505053'
        }
     },

     scrollbar: {
        barBackgroundColor: '#808083',
        barBorderColor: '#808083',
        buttonArrowColor: '#CCC',
        buttonBackgroundColor: '#606063',
        buttonBorderColor: '#606063',
        rifleColor: '#FFF',
        trackBackgroundColor: '#404043',
        trackBorderColor: '#404043'
     },

     // special colors for some of the
     legendBackgroundColor: 'rgba(0, 0, 0, 0.5)',
     background2: '#505053',
     dataLabelsColor: '#B0B0B3',
     textColor: '#C0C0C0',
     contrastTextColor: '#F0F0F3',
     maskColor: 'rgba(255,255,255,0.3)'
  };

  // Apply the theme
  Highcharts.setOptions(Highcharts.theme);

  /**
     * Highcharts plugin for setting a lower opacity for other series than the one that is hovered
     * in the legend
     */
  (function (Highcharts) {
      var each = Highcharts.each;
      
      Highcharts.wrap(Highcharts.Legend.prototype, 'renderItem', function (proceed, item) {
          
          proceed.call(this, item);
          
          
          var isPoint = !!item.series,
              collection = isPoint ? item.series.points : this.chart.series,
              groups = isPoint ? ['graphic'] : ['group', 'markerGroup'],
              element = item.legendGroup.element;
          
          element.onmouseover = function () {
             each(collection, function (seriesItem) {
                  if (seriesItem !== item) {
                      each(groups, function (group) {
                          seriesItem[group].animate({
                              opacity: 0.25
                          }, {
                              duration: 150
                          });
                      });
                  }
              });
          }
          element.onmouseout = function () {
             each(collection, function (seriesItem) {
                  if (seriesItem !== item) {
                      each(groups, function (group) {
                          seriesItem[group].animate({
                              opacity: 1
                          }, {
                              duration: 50
                          });
                      });
                  }
              });
          }           
          
      });
  }(Highcharts));