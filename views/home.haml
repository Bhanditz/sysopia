#cssmenu.range_selector
	%ul
		%li
			%a{:href => "/?page=24_hours_ago", :class => "24_hours_ago" }
				%span Last 24 Hours   
		%li
			%a{:href => "/?page=7_days_ago", :class => "7_days_ago" }
				%span Last 7 Days
		%li
			%a{:href => "/?page=30_days_ago", :class => "30_days_ago" }
				%span Last 30 Days
		%li
			%a{:href => "/?start=#{Date.today.beginning_of_month.last_month.strftime('%Y-%m-%d')}&end=#{Date.today.end_of_month.last_month.strftime('%Y-%m-%d')}&page=last_month", :class => "last_month" }
				%span Last Month   
		%li
			%a{:href => "/?start=#{Time.now.strftime('%Y-%m-%d')}&page=today", :class => "today" }
				%span Today
		%li
			%a{:href => "/?start=#{(Time.now - Unit.new('1day')).strftime('%Y-%m-%d')}&end=#{(Time.now).strftime('%Y-%m-%d')}&page=yesterday", :class => "yesterday" }
				%span Yesterday
		%li
			%a{:href => "/?start=#{Date.today.beginning_of_month.strftime('%Y-%m-%d')}&page=this_month", :class => "this_month" }
				%span This Month     
		%li.last
			%a{:href => "/?start=#{Date.today.beginning_of_year.strftime('%Y-%m-%d')}&page=this_year", :class => "this_year" }
				%span This Year
				

:javascript

	$( document ).ready(function() {    
		if(document.location.search.length) {  
			var page = url('?page')
			if (page){				
				var list_item = $('#cssmenu .'+page).parent()     
				list_item.addClass("active")      
				$('#cssmenu').prepend('<div id="menu-button">'+ list_item.find("a").html() +'</div>');
			}
		}
		else{
			var first_list_item = $('#cssmenu').find("ul li").first()
			first_list_item.addClass("active")
			$('#cssmenu').prepend('<div id="menu-button">'+ first_list_item.find("a").html() +'</div>');
		}
		
		$('#cssmenu #menu-button').on('click', function(){
			var menu = $(this).next('ul');
			if (menu.hasClass('open')) {
				menu.removeClass('open');
			}
			else {
				menu.addClass('open');
			}
		});

		$('#cssmenu ul').on('click', function(){     
			$(this).removeClass('open');        
		});
	});  

	var graph_colors = ["#cb513a", "#73c03a", "#65b9ac", "#4682b4", "#96557e", "#785f43", "#858772", "#b5b6a9", "#c7b439", "#4fbd66", "#55a9b7", "#724ea5", "#874c4f", "#817959", "#9d9f8d", "#b9b777", "#7ec244", "#52ba98", "#4f65b0", "#964d89", "#846552", "#929171", "#aaac82", "#c1945a", "#c7b439"];

	var matrics_data = #{@matrics_data} 
	var real_time = #{@real_time} 
	var previous_timestamp = #{@previous_timestamp} 	
	
	if (real_time == true){		
		setInterval(function () {
			$.get("?start="+previous_timestamp, function(data, status){        										
				previous_timestamp = data.previous_timestamp       
							
				$.each(data.stats, function(i, stat) {				
					chart = charts.filter(function (chart) {				
						return chart.renderTo.id == stat.name;
					})[0];

					$.each(stat.comps, function(i, comp) {		    	
						$.each(comp.data, function(j, data) {
							chart.series[i].addPoint([data["x"], data["y"]], true, false);
						})
					})
				})
			});
		}, 120000);
	}
	
	var charts = []
	$(function () {
		$.each(matrics_data, function(i, matric) {     
			var seriesOptions = [],
					seriesCounter = 0,    
					systems = matric['comps']

			var $div = $("<div>", {id: matric.name, class: "chart_container"});
			$("#container").append($div);
			
			$(".highcharts-legend-item tspan:last-child").css("visibility","hidden");
			if (real_time){	
				matric.description += " (Realtime)"
			}
			createChart = function () {

				charts.push(new Highcharts.StockChart({
					title: {
						text: matric.description
					},
					credits: {
						enabled: false
					},
					chart: {
						renderTo: matric.name,
						className: matric.name,
						name: matric.name,
						pinchType: "xy",
						zoomType: "xy",
						resetZoomButton: {
							position: {
								align: 'right', 
								verticalAlign: 'bottom'                
							}
						},
						events: {          
							redraw: function () {                  
								// modify the legend symbol from a line to a rect                  
								$(".highcharts-legend-item path").attr('stroke-width', 12);
								// hide graph inside timeline
								$(".highcharts-series-group").find(".highcharts-series:last").css("visibility","hidden");								
								
							}
						}
					},      
					navigator: {
						height: 20
					},          
					legend: {
						enabled: true,
						align: "right",                  
						layout: "vertical",
						verticalAlign: "top",
						y: 85,
						itemMarginTop: 2,
						itemMarginTop: 2,
						itemMarginLeft: 10,
						itemMarginBottom: 2,
						symbolWidth: 18,  
						itemWidth: 225,   

						labelFormatter: function () {
							if (this.point && typeof this.point.series != "undefined"){                               
								var matric = matrics_data[this.point.series.options.dataLabels] 
								if (this.state)                    
									return '<span style="color:'+this.color+'">'+this.name+': </span><span class="value" >' + parseFloat(this.point.y*matric.multiplier).toFixed(2) + ' ' + matric.unit + '</span>' 
								else
									return '<span style="color:'+this.color+'">'+this.name+': </span><span class="value"></span>'           
							}
							else
								return '<span style="color:'+this.color+'">'+this.name+': </span><span class="value">-</span>'                
						}                              
					},
					rangeSelector: {
						buttons: [{                
							type: 'all',
							text: 'All'
						}],                
						inputEnabled: true,
						selected: 1
					},
					xAxis: {       
						ordinal: false
					},
					yAxis: {
							labels: {
									formatter: function () {                       
										var matric = matrics_data[this.chart.series[0].options.dataLabels]              
										return (this.y > 0 ? ' + ' : '') + this.value*matric.multiplier + matric.unit;
									}
							},
							min: 0 
					},    
					tooltip: {
						enabled: true,
						positioner: function(boxWidth, boxHeight, point) {         
							return {
								x: point.plotX,
								y: this.chart.plotTop - 35
							};         
						},
						formatter:function(){                     
							chart = this.points[0].series.chart
							var legendOptions = chart.legend.options,
									hoverPoints = chart.hoverPoints;                
							if (!hoverPoints && chart.hoverPoint) {
									hoverPoints = [chart.hoverPoint];
							}

							var hoverComps = [];
							if (hoverPoints) {  
								$(hoverPoints).each(function(i, point){                    
									point.series.point = point;
									hoverComps.push(point.series.name)
								});      
										
								$(chart.legend.allItems).each(function(i, item){
									item.state = "."                 
									if (hoverComps.indexOf(item.name) == -1){     
										item.state = null                    
										$(item.legendItem.element).find("tspan:last-child").css("visibility","hidden")
									}       
									else{
										item.legendItem.attr({
											text: legendOptions.labelFormat ? 
												H.format(legendOptions.labelFormat, item) :
												legendOptions.labelFormatter.call(item)
										});  
									}
								});									
							}   
							return  '<span>' +new Date(this.points[0].x).toUTCString()+'<br/></span>';
						}
					},
					plotOptions: {              
						series: {
							showCheckbox: true,
							cursor : 'pointer',
							turboThreshold: 0,
							showCheckbox:true,
							selected: true,
							stickyTracking: false,
							events: {											
								checkboxClick: function (event) {
									if (event.checked) {
										this.show();                     
										var element = $(this.legendItem.element).find("tspan:first")
										element.attr('style', element.attr('stylee'));
										element.removeAttr('stylee');										
									} else {                      
										this.hide();                      
										var element = $(this.legendItem.element).find("tspan:first")
										element.attr('stylee', element.attr('style'));
										element.removeAttr('style');										                   
									}
								},
								legendItemClick: function() {
									return false;
								}

							}, 
							states: {
								hover: {
									enabled: true,
									lineWidth: 2
								}
							}             
						}
					},
					series: seriesOptions,
					exporting: {								
						buttons: {
							contextButton: {
								menuItems: [{
										textKey: 'printChart',
										onclick: function () {
												this.print();
										}
								}]
							},					        
							legend_select_all: {
								id: 'legend_select_all',
								text: 'Deselect all',
								y: 60,
								x: 5,
								onclick: function () {     
										
									if (this.series[0].visible == true){												
										$(this.series).each(function(){                        
											this.setVisible(false, true);
										});         

										for (var i = 0; i < this.legend.allItems.length; i++) {                
											var element = $(this.legend.allItems[i].legendItem.element).find("tspan:first");
											element.attr('stylee', element.attr('style'));
											element.removeAttr('style');
											$(this.legend.allItems[i].checkbox).prop('checked', false);           
										}
										$(this.container).find(".highcharts-button:last tspan").html("Select all")
									}
									else{
										$(this.series).each(function(){                        
											this.setVisible(true, true);
										});         

										for (var i = 0; i < this.legend.allItems.length; i++) {                
											var element = $(this.legend.allItems[i].legendItem.element).find("tspan:first");
											element.attr('stylee', element.attr('style'));
											element.removeAttr('style');											
											$(this.legend.allItems[i].checkbox).prop('checked', true);           
										}
										$(this.container).find(".highcharts-button:last tspan").html("Deselect all")
									} 
								}                    
							}
						}
					},
					navigation: {
						buttonOptions: {
							theme: {
								'stroke-width': 1,
								stroke: 'silver',
								r: 0,
								states: {
									hover: {
										fill: '#cccccc'
									},
									select: {
										stroke: '#039',
										fill: '#cccccc'
									}
								}
							}
						}
					}
				}));
			};

			$.each(systems, function (i) { 				
				seriesOptions[i] = {
					name: systems[i].name,
					data: systems[i].data,
					color: graph_colors[i],
					dataLabels: matric.name      
				};   
				seriesCounter += 1;
				if (seriesCounter === systems.length) {
						createChart();
				}     
			});
		})
	}); 


	
	(function (Highcharts) {
			var each = Highcharts.each;
			
			/*
			 * Highcharts plugin for setting a lower opacity for other series than the one that is hovered
			 * in the graph
			 */	
			Highcharts.wrap(Highcharts.Series.prototype, 'onMouseOver', function (proceed) {
				proceed.apply(this, Array.prototype.slice.call(arguments, 1));

				var series = this,			
					collection = this.chart.series,
					groups = ['group', 'markerGroup']						
			
				each(collection, function (seriesItem) {		
					if (seriesItem !== series && seriesItem.name != "Navigator") {					
						
						var legend_item = $(seriesItem.legendItem.element).find("tspan:first")
						legend_item.attr('stylee', legend_item.attr('style'));
						legend_item.removeAttr('style');

						each(groups, function (group) {
							seriesItem[group].animate({
								opacity: 0.25
							}, {
								duration: 150
							});
						});
					}
				});
			})
		
			Highcharts.wrap(Highcharts.Series.prototype, 'onMouseOut', function (proceed) {
				proceed.apply(this, Array.prototype.slice.call(arguments, 1));				
				var series = this,			
					collection = this.chart.series,
					groups = ['group', 'markerGroup']			

				each(collection, function (seriesItem) {		
					if (seriesItem !== series && seriesItem.name != "Navigator") {

						var legend_item = $(seriesItem.legendItem.element).find("tspan:first")
						legend_item.attr('style', legend_item.attr('stylee'));
						legend_item.removeAttr('stylee');

						each(groups, function (group) {
							seriesItem[group].animate({
									opacity: 1
							}, {
									duration: 50
							});
						});
					}
				});

			})

			/*
			 * Highcharts plugin for setting a lower opacity for other series than the one that is hovered
			 * in the legend
			 */		 
			Highcharts.wrap(Highcharts.Legend.prototype, 'renderItem', function (proceed, item) {
				proceed.call(this, item);

				var isPoint = !!item.series,
					collection = isPoint ? item.series.points : this.chart.series,
					groups = isPoint ? ['graphic'] : ['group', 'markerGroup'],
					element = item.legendGroup.element;
								
				element.onmouseover = function () {					
				 each(collection, function (seriesItem) {
						if (seriesItem !== item) {
							each(groups, function (group) {
								seriesItem[group].animate({
										opacity: 0.25
								}, {
										duration: 150
								});
						});
						}
					});
				}
				element.onmouseout = function () {
				 each(collection, function (seriesItem) {
						if (seriesItem !== item) {
							each(groups, function (group) {
								seriesItem[group].animate({
										opacity: 1
								}, {
										duration: 50
								});
							});
						}
					});
				}           
					
			});
	}(Highcharts));